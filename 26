#include <stdio.h>

// Extended Euclidean Algorithm
int extended_gcd(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0; *y = 1;
        return b;
    }
    int x1, y1;
    int gcd = extended_gcd(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}

int mod_inverse(int a, int m) {
    int x, y;
    int g = extended_gcd(a, m, &x, &y);
    if (g != 1) return -1;
    return (x % m + m) % m;
}

// Simulate RSA key generation
void rsa_generate_keys(int *e, int *d, int *n, int *phi) {
    int p = 61, q = 53;
    *n = p * q;             // n = 3233
    *phi = (p - 1) * (q - 1); // φ(n) = 3120
    *e = 17;                // Common choice
    *d = mod_inverse(*e, *phi);
}

// Simulate attacker factoring n if d is leaked
void attacker_recovery(int n, int e, int d) {
    printf("\n[ATTACKER] Leaked d = %d, public e = %d, n = %d\n", d, e, n);
    int k = 1;
    int phi;
    while (1) {
        if (((e * d) - 1) % k == 0) {
            phi = ((e * d) - 1) / k;
            // Try factoring n using phi(n)
            for (int p = 2; p < n; p++) {
                if (n % p == 0) {
                    int q = n / p;
                    if ((p - 1) * (q - 1) == phi) {
                        printf("[ATTACKER] Factored n: p = %d, q = %d\n", p, q);
                        return;
                    }
                }
            }
        }
        k++;
        if (k > 100000) {
            printf("Attack failed.\n");
            break;
        }
    }
}

int main() {
    int e, d, n, phi;

    rsa_generate_keys(&e, &d, &n, &phi);
    printf("Bob's Public Key: (e = %d, n = %d)\n", e, n);
    printf("Bob's Private Key: d = %d\n", d);

    // Simulate attacker recovering p and q
    attacker_recovery(n, e, d);

    // Bob tries to change only e and d with same n (unsafe!)
    int new_e = 7;
    int new_d = mod_inverse(new_e, phi);
    printf("\nBob attempts new public key (e = %d, n = %d), new private key d = %d\n", new_e, n, new_d);
    printf("But attacker still knows φ(n), so this is unsafe!\n");

    return 0;
}
