#include <stdio.h>
#include <stdint.h>

// Example PC-1 and PC-2 tables and shifts (simplified)
int PC1[56] = {
    57,49,41,33,25,17,9,
    1,58,50,42,34,26,18,
    10,2,59,51,43,35,27,
    19,11,3,60,52,44,36,
    63,55,47,39,31,23,15,
    7,62,54,46,38,30,22,
    14,6,61,53,45,37,29,
    21,13,5,28,20,12,4
};

int PC2[48] = {
    14,17,11,24,1,5,
    3,28,15,6,21,10,
    23,19,12,4,26,8,
    16,7,27,20,13,2,
    41,52,31,37,47,55,
    30,40,51,45,33,48,
    44,49,39,56,34,53,
    46,42,50,36,29,32
};

int shifts[16] = {1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};

// Extract bit helper
int get_bit(uint64_t key, int pos) {
    return (key >> (64 - pos)) & 1;
}

// Left shift 28-bit half
uint32_t left_shift_28(uint32_t half, int shift) {
    return ((half << shift) | (half >> (28 - shift))) & 0x0FFFFFFF;
}

// Generate 16 round keys from 64-bit key
void generate_round_keys(uint64_t key, uint64_t round_keys[16]) {
    uint32_t C = 0, D = 0;
    // Apply PC1 to get 56 bits and split into C and D
    for (int i = 0; i < 28; i++) {
        C <<= 1;
        C |= get_bit(key, PC1[i]);
    }
    for (int i = 28; i < 56; i++) {
        D <<= 1;
        D |= get_bit(key, PC1[i]);
    }
    // Generate 16 keys
    for (int round = 0; round < 16; round++) {
        C = left_shift_28(C, shifts[round]);
        D = left_shift_28(D, shifts[round]);

        // Combine C and D into 56 bits
        uint64_t CD = ((uint64_t)C << 28) | D;
        uint64_t round_key = 0;

        // Apply PC2 to get 48-bit round key
        for (int i = 0; i < 48; i++) {
            round_key <<= 1;
            round_key |= (CD >> (56 - PC2[i])) & 1;
        }
        round_keys[round] = round_key;
    }
}

void print_key(uint64_t key, int bits) {
    for (int i = bits - 1; i >= 0; i--) {
        printf("%lld", (key >> i) & 1);
        if (i % 8 == 0) printf(" ");
    }
    printf("\n");
}

int main() {
    uint64_t key = 0x133457799BBCDFF1; // example 64-bit DES key
    uint64_t round_keys[16];

    generate_round_keys(key, round_keys);

    printf("Round keys (encryption order):\n");
    for (int i = 0; i < 16; i++) {
        printf("K%d: ", i+1);
        print_key(round_keys[i], 48);
    }

    printf("\nRound keys (decryption order):\n");
    for (int i = 15; i >= 0; i--) {
        printf("K%d: ", i+1);
        print_key(round_keys[i], 48);
    }

    // The actual DES decryption applies the same steps as encryption
    // but uses round keys in reverse order.

    return 0;
}
