#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <ctype.h>

// Encrypt plaintext using one-time pad Vigen√®re cipher
void encrypt(const char *plaintext, int *key, int key_len, char *ciphertext) {
    for(int i=0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char base = 'A';
            int p = toupper(plaintext[i]) - base;
            int c = (p + key[i % key_len]) % 26;
            ciphertext[i] = base + c;
        } else {
            ciphertext[i] = plaintext[i];  // leave non-alpha unchanged
        }
    }
    ciphertext[strlen(plaintext)] = '\0';
}

// Generate random key stream between 0 and 26
void generate_key(int *key, int length) {
    for(int i=0; i<length; i++) {
        key[i] = rand() % 27;  // 0 to 26 inclusive
    }
}

int main() {
    srand(time(NULL));

    char plaintext[256];
    printf("Enter plaintext (A-Z only): ");
    fgets(plaintext, sizeof(plaintext), stdin);

    int len = 0;
    while(plaintext[len] != '\0' && plaintext[len] != '\n') len++;

    int *key = malloc(len * sizeof(int));
    char *ciphertext = malloc(len + 1);

    generate_key(key, len);

    printf("Key stream: ");
    for(int i=0; i<len; i++) {
        printf("%d ", key[i]);
    }
    printf("\n");

    encrypt(plaintext, key, len, ciphertext);

    printf("Ciphertext: %s\n", ciphertext);

    free(key);
    free(ciphertext);
    return 0;
}
