#include <stdio.h>
#include <stdint.h>

// --- S-DES FUNCTIONS ---
uint8_t IP(uint8_t in) {
    return ((in & 0xF0) >> 4) | ((in & 0x0F) << 4); // simple swap for test
}

uint8_t IP_INV(uint8_t in) {
    return IP(in); // inverse same as IP for our placeholder
}

uint8_t P4(uint8_t in) {
    return ((in & 0x08) >> 2) | ((in & 0x04) << 1) | ((in & 0x02) >> 1) | ((in & 0x01) << 2);
}

uint8_t SBOX(uint8_t input, int sbox[4][4]) {
    int row = ((input & 0b1000) >> 2) | (input & 0b0001);
    int col = (input & 0b0110) >> 1;
    return sbox[row][col];
}

uint8_t f_function(uint8_t right, uint8_t subkey) {
    uint8_t ep = ((right & 0x01) << 3) | ((right & 0x02) << 1) |
                 ((right & 0x04) >> 1) | ((right & 0x08) >> 3) |
                 ((right & 0x08) << 1) | ((right & 0x04) << 1) |
                 ((right & 0x02) >> 1) | ((right & 0x01) >> 1);
    uint8_t x = ep ^ subkey;

    int S0[4][4] = {{1,0,3,2}, {3,2,1,0}, {0,2,1,3}, {3,1,3,2}};
    int S1[4][4] = {{0,1,2,3}, {2,0,1,3}, {3,0,1,0}, {2,1,0,3}};

    uint8_t left_sbox = SBOX((x >> 4) & 0x0F, S0);
    uint8_t right_sbox = SBOX(x & 0x0F, S1);

    return P4((left_sbox << 2) | right_sbox);
}

void generate_keys(uint16_t key, uint8_t *k1, uint8_t *k2) {
    *k1 = (key >> 2) & 0xFF;
    *k2 = (key << 2) & 0xFF;
}

uint8_t sdes_encrypt(uint8_t plaintext, uint8_t k1, uint8_t k2) {
    uint8_t ip = IP(plaintext);
    uint8_t left = ip >> 4;
    uint8_t right = ip & 0x0F;

    left ^= f_function(right, k1);
    uint8_t temp = left;
    left = right;
    right = temp;

    left ^= f_function(right, k2);
    return IP_INV((left << 4) | right);
}

// --- CTR MODE ---
void sdes_ctr_encrypt(uint8_t *plaintext, uint8_t *ciphertext, int length, uint16_t key10, uint8_t start_counter) {
    uint8_t k1, k2;
    generate_keys(key10, &k1, &k2);
    uint8_t counter = start_counter;

    for (int i = 0; i < length; ++i) {
        uint8_t keystream = sdes_encrypt(counter, k1, k2);
        ciphertext[i] = plaintext[i] ^ keystream;
        counter++;
    }
}

void sdes_ctr_decrypt(uint8_t *ciphertext, uint8_t *plaintext, int length, uint16_t key10, uint8_t start_counter) {
    // Same as encryption in CTR mode
    sdes_ctr_encrypt(ciphertext, plaintext, length, key10, start_counter);
}

// --- HELPER ---
void print_bin(const char *label, uint8_t *data, int len) {
    printf("%s: ", label);
    for (int i = 0; i < len; i++) {
        for (int j = 7; j >= 0; j--)
            printf("%d", (data[i] >> j) & 1);
        printf(" ");
    }
    printf("\n");
}

int main() {
    uint8_t plaintext[3] = {0x01, 0x02, 0x04}; // 00000001 00000010 00000100
    uint8_t ciphertext[3];
    uint8_t decrypted[3];

    uint16_t key10 = 0x1FD;  // 0111111101
    uint8_t counter = 0x00;  // 00000000

    sdes_ctr_encrypt(plaintext, ciphertext, 3, key10, counter);
    sdes_ctr_decrypt(ciphertext, decrypted, 3, key10, counter);

    print_bin("Plaintext ", plaintext, 3);
    print_bin("Ciphertext", ciphertext, 3);
    print_bin("Decrypted ", decrypted, 3);

    return 0;
}
