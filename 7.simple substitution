#include <stdio.h>
#include <string.h>

// Mapping ciphertext symbols to plaintext letters
// You need to fill the keyMap according to your cipher key
// For demonstration, let's assume:
// '‡' -> 'E', '†' -> 'T', '3' -> 'A', '5' -> 'H', etc.

char decryptChar(char c) {
    switch (c) {
        case '‡': return 'E';
        case '†': return 'T';
        case '3': return 'A';
        case '5': return 'H';
        case '0': return 'O';
        case ')': return 'N';
        case '*': return 'S';
        case ';': return 'R';
        case '4': return 'I';
        case '8': return 'D';
        case '2': return 'L';
        case '6': return 'C';
        case '9': return 'M';
        case '1': return 'U';
        case '(': return 'F';
        case ']': return 'P';
        case ':': return 'W';
        case '?': return 'Y';
        case '¶': return 'B';
        case '—': return 'G';
        case '‡': return 'E'; // repeated to reinforce
        // Add other mappings as needed
        default: return c;  // non-mapped chars unchanged
    }
}

int main() {
    char ciphertext[] = "53‡‡†305))6*;4826)4‡.)4‡);806*;48†8¶60))85;;]8*;:‡*8†83"
                        "(88)5*†;46(;88*96*?;8)*‡(;485);5*†2:*‡(;4956*2(5*—4)8¶8*"
                        ";4069285);)6†8)4‡‡;1(‡9;48081;8:8‡1;48†85;4)485†528806*81 (‡9;48;(88;4(‡?34;48)4‡;161;:188;‡?;";

    printf("Decrypted text:\n");

    for (int i = 0; ciphertext[i] != '\0'; i++) {
        printf("%c", decryptChar(ciphertext[i]));
    }

    printf("\n");
    return 0;
}
