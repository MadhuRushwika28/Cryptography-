#include <stdio.h>

// Extended Euclidean Algorithm
int extended_gcd(int a, int b, int *x, int *y) {
    if (a == 0) {
        *x = 0; *y = 1;
        return b;
    }
    int x1, y1;
    int gcd = extended_gcd(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}

// Modular inverse
int mod_inverse(int e, int phi) {
    int x, y;
    int gcd = extended_gcd(e, phi, &x, &y);
    if (gcd != 1) return -1;
    return (x % phi + phi) % phi;
}

// Brute-force GCD
int gcd(int a, int b) {
    while (b != 0) {
        int tmp = b;
        b = a % b;
        a = tmp;
    }
    return a;
}

// Encryption
int rsa_encrypt(int m, int e, int n) {
    int result = 1;
    for (int i = 0; i < e; i++) {
        result = (result * m) % n;
    }
    return result;
}

// Decryption
int rsa_decrypt(int c, int d, int n) {
    int result = 1;
    for (int i = 0; i < d; i++) {
        result = (result * c) % n;
    }
    return result;
}

int main() {
    int n = 3599;
    int e = 31;

    // Let's say we receive a plaintext block `m` that shares a factor with n
    int m = 59; // GCD(m, n) = 59 (which is p!)

    int p = gcd(m, n);
    if (p == 1 || p == n) {
        printf("No useful common factor found.\n");
        return 0;
    }

    int q = n / p;
    int phi = (p - 1) * (q - 1);
    int d = mod_inverse(e, phi);

    if (d == -1) {
        printf("Failed to compute modular inverse.\n");
        return 1;
    }

    printf("Recovered p: %d, q: %d\n", p, q);
    printf("Computed Ï†(n): %d\n", phi);
    printf("Recovered private key d: %d\n", d);

    // Try decrypting a ciphertext block
    int plaintext = 123;
    int ciphertext = rsa_encrypt(plaintext, e, n);
    int decrypted = rsa_decrypt(ciphertext, d, n);

    printf("Original plaintext: %d\n", plaintext);
    printf("Encrypted ciphertext: %d\n", ciphertext);
    printf("Decrypted plaintext: %d\n", decrypted);

    return 0;
}
