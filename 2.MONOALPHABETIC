#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>

// Function to validate that the key has 26 unique alphabetic characters
bool isValidKey(char* key) {
    if (strlen(key) != 26) return false;

    bool seen[26] = {false};

    for (int i = 0; i < 26; i++) {
        if (!isalpha(key[i])) return false;

        int index = tolower(key[i]) - 'a';
        if (seen[index]) return false; // Duplicate letter
        seen[index] = true;
    }

    return true;
}

// Function to encrypt the message using the substitution key
void encryptMonoalphabetic(char* plaintext, char* key) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        char c = plaintext[i];

        if (isalpha(c)) {
            if (isupper(c)) {
                plaintext[i] = toupper(key[c - 'A']);
            } else {
                plaintext[i] = tolower(key[c - 'a']);
            }
        }
    }
}

int main() {
    char key[27];  // 26 letters + null terminator
    char message[1000];

    printf("Enter 26-letter substitution key (e.g., QWERTYUIOPASDFGHJKLZXCVBNM): ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0'; // remove newline

    if (!isValidKey(key)) {
        printf("Invalid key. Must contain 26 unique letters.\n");
        return 1;
    }

    printf("Enter the plaintext message: ");
    fgets(message, sizeof(message), stdin);

    encryptMonoalphabetic(message, key);

    printf("Encrypted message: %s\n", message);

    return 0;
}
