#include <stdio.h>

// Compute gcd of two numbers
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Compute modular inverse of a mod m using Extended Euclidean Algorithm
int modInverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1) return 0;

    while (a > 1) {
        q = a / m;
        t = m;

        m = a % m;
        a = t;
        t = x0;

        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}

// Encrypt a character using affine cipher
char encrypt_char(char p, int a, int b) {
    if (p >= 'A' && p <= 'Z') {
        int p_val = p - 'A';
        int c_val = (a * p_val + b) % 26;
        return c_val + 'A';
    } else if (p >= 'a' && p <= 'z') {
        int p_val = p - 'a';
        int c_val = (a * p_val + b) % 26;
        return c_val + 'a';
    }
    return p; // Non-alphabetic characters unchanged
}

// Decrypt a character using affine cipher
char decrypt_char(char c, int a_inv, int b) {
    if (c >= 'A' && c <= 'Z') {
        int c_val = c - 'A';
        int p_val = (a_inv * (c_val - b + 26)) % 26;
        return p_val + 'A';
    } else if (c >= 'a' && c <= 'z') {
        int c_val = c - 'a';
        int p_val = (a_inv * (c_val - b + 26)) % 26;
        return p_val + 'a';
    }
    return c; // Non-alphabetic characters unchanged
}

int main() {
    int a, b;
    char plaintext[256], ciphertext[256], decrypted[256];

    printf("Enter key 'a' (must be coprime with 26): ");
    scanf("%d", &a);
    if (gcd(a, 26) != 1) {
        printf("Invalid key 'a'. It must be coprime with 26 for invertibility.\n");
        return 1;
    }

    printf("Enter key 'b' (0 <= b < 26): ");
    scanf("%d", &b);
    if (b < 0 || b >= 26) {
        printf("Invalid key 'b'. It must be between 0 and 25.\n");
        return 1;
    }

    getchar(); // consume newline after scanf

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);

    // Encrypt plaintext
    for (int i = 0; plaintext[i] != '\0' && plaintext[i] != '\n'; i++) {
        ciphertext[i] = encrypt_char(plaintext[i], a, b);
        ciphertext[i+1] = '\0';
    }

    printf("Ciphertext: %s\n", ciphertext);

    // Compute modular inverse of a for decryption
    int a_inv = modInverse(a, 26);

    // Decrypt ciphertext
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        decrypted[i] = decrypt_char(ciphertext[i], a_inv, b);
        decrypted[i+1] = '\0';
    }

    printf("Decrypted text: %s\n", decrypted);

    return 0;
}
