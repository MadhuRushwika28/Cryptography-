#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Encrypt plaintext using key with Vigen√®re cipher rules
void encryptPolyalphabetic(char* plaintext, char* key, char* ciphertext) {
    int keyLen = strlen(key);
    int keyIndex = 0;

    for (int i = 0; plaintext[i] != '\0'; i++) {
        char p = plaintext[i];

        if (isalpha(p)) {
            char base = isupper(p) ? 'A' : 'a';
            char k = toupper(key[keyIndex % keyLen]) - 'A';  // key shift (0-25)
            ciphertext[i] = (p - base + k) % 26 + base;

            keyIndex++;
        } else {
            ciphertext[i] = p;  // non-alphabetic unchanged
        }
    }
    ciphertext[strlen(plaintext)] = '\0';
}

int main() {
    char plaintext[1000];
    char key[100];
    char ciphertext[1000];

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';  // Remove trailing newline

    printf("Enter key (letters only): ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0';

    // Validate key (must be alphabetic)
    for (int i = 0; i < strlen(key); i++) {
        if (!isalpha(key[i])) {
            printf("Invalid key! Key must contain letters only.\n");
            return 1;
        }
    }

    encryptPolyalphabetic(plaintext, key, ciphertext);

    printf("Encrypted text: %s\n", ciphertext);

    return 0;
}
