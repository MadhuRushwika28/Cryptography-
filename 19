#include <stdio.h>
#include <string.h>
#include <openssl/des.h>

// Encrypt one block (8 bytes) with 3DES in CBC mode
void encrypt_3des_cbc(const unsigned char *plaintext, unsigned char *ciphertext, 
                      int length, DES_key_schedule ks1, DES_key_schedule ks2, DES_key_schedule ks3,
                      unsigned char iv[8]) {
    unsigned char block[8];
    unsigned char prev_block[8];
    memcpy(prev_block, iv, 8);

    for (int i = 0; i < length; i += 8) {
        // XOR plaintext block with previous ciphertext (or IV for first block)
        for (int j = 0; j < 8; j++) {
            block[j] = plaintext[i + j] ^ prev_block[j];
        }

        // Encrypt block with 3DES: E_k3(D_k2(E_k1(block)))
        DES_cblock input, output;
        memcpy(input, block, 8);

        DES_ecb_encrypt(&input, &output, &ks1, DES_ENCRYPT);
        DES_ecb_encrypt(&output, &input, &ks2, DES_DECRYPT);
        DES_ecb_encrypt(&input, &output, &ks3, DES_ENCRYPT);

        memcpy(&ciphertext[i], output, 8);
        memcpy(prev_block, output, 8);
    }
}

int main() {
    // Example 24-byte key (3 DES keys)
    DES_cblock key1 = {0x01,0x23,0x45,0x67,0x89,0xAB,0xCD,0xEF};
    DES_cblock key2 = {0xFE,0xDC,0xBA,0x98,0x76,0x54,0x32,0x10};
    DES_cblock key3 = {0x89,0xAB,0xCD,0xEF,0x01,0x23,0x45,0x67};

    DES_key_schedule ks1, ks2, ks3;
    DES_set_key_unchecked(&key1, &ks1);
    DES_set_key_unchecked(&key2, &ks2);
    DES_set_key_unchecked(&key3, &ks3);

    unsigned char iv[8] = {0x00};  // Initialization Vector (usually random)

    // Example plaintext must be multiple of 8 bytes
    unsigned char plaintext[] = "This is 24 bytes msg!"; // 24 bytes for demo
    unsigned char ciphertext[24];

    encrypt_3des_cbc(plaintext, ciphertext, 24, ks1, ks2, ks3, iv);

    printf("Ciphertext:\n");
    for (int i = 0; i < 24; i++) {
        printf("%02X ", ciphertext[i]);
    }
    printf("\n");

    return 0;
}
