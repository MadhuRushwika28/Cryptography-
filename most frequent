#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Modular inverse function using Extended Euclidean Algorithm
int modInverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    while (a > 1) {
        q = a / m;

        t = m;
        m = a % m;
        a = t;

        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}

// Decrypt function for affine cipher
void decryptAffine(char* ciphertext, int a, int b, char* plaintext) {
    int a_inv = modInverse(a, 26);

    for (int i = 0; ciphertext[i] != '\0'; i++) {
        char c = ciphertext[i];
        if (isalpha(c)) {
            int y = toupper(c) - 'A';
            int x = (a_inv * (y - b + 26)) % 26;
            plaintext[i] = x + 'A';
        } else {
            plaintext[i] = c;
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

int main() {
    char ciphertext[1000], plaintext[1000];
    int a = 3, b = 15;  // keys derived from frequency analysis

    printf("Enter ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';

    decryptAffine(ciphertext, a, b, plaintext);

    printf("Decrypted plaintext: %s\n", plaintext);

    return 0;
}
